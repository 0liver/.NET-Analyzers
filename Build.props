<Project>
  <PropertyGroup>
    <CodeAnalysisRuleSet>$(MSBuildThisFileDirectory)OrchardCore.ruleset</CodeAnalysisRuleSet>
    <GenerateDocumentationFile>true</GenerateDocumentationFile>
    <!-- Don't run analyzers during Visual Studio build, not to slow down development. They still run during dotnet build. -->
    <RunAnalyzersDuringBuild>false</RunAnalyzersDuringBuild>
    <!-- Needed for project targeting versions earlier than .NET 5. Only works with .NET Core and later projects, see:
    https://docs.microsoft.com/en-us/dotnet/core/project-sdk/overview.
    Note that this is not needed if the Microsoft.CodeAnalysis.NetAnalyzers NuGet package is installed. -->
    <!-- <EnableNETAnalyzers>true</EnableNETAnalyzers> -->
    <!-- Useful to set here since the language version affects which analyzers to use and how to configure them. -->
    <LangVersion>10.0</LangVersion>
    <!-- Setting the analysis level explicitly lets us opt in to new analyzers with SDK upgrades. See:
    https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/overview#latest-updates -->
    <AnalysisLevel>5.0</AnalysisLevel>
    <!-- This is for Microsoft.CodeAnalysis.NetAnalyzers. This way, we have control over it unlike when getting it
    via the .NET SDK. See: https://docs.microsoft.com/en-us/visualstudio/code-quality/migrate-from-fxcop-analyzers-to-net-analyzers
    .NET code style analysis is not working with .NET 5 though, see: https://github.com/dotnet/roslyn/issues/33558#issuecomment-867346974. -->
    <AnalysisMode>AllEnabledByDefault</AnalysisMode>
    <!-- This prevents unnecessary warnings so the analyzer versions will depend on the repository and not what is
    installed by the user. see: https://github.com/dotnet/docs/issues/23232. -->
    <_SkipUpgradeNetAnalyzersNuGetWarning>true</_SkipUpgradeNetAnalyzersNuGetWarning>
  </PropertyGroup>

  <Import Project="$(MSBuildThisFileDirectory)CommonPackages.props" />

  <!-- Packages only for .NET Core and later. -->
  <ItemGroup>
    <!-- Necessary to prevent errrors of the following kind on certain machines: "Adding
    Microsoft.CodeAnalysis.Compilers and Microsoft.Net.Compilers directly as packages to prevent errors of the sort of
    "error CS8032: An instance of analyzer
    Microsoft.CodeAnalysis.CSharp.ConvertTypeOfToNameOf.CSharpConvertTypeOfToNameOfDiagnosticAnalyzer cannot be created
    from
    C:\Users\MyUser\.nuget\packages\microsoft.codeanalysis.csharp.codestyle\3.10.0\analyzers\dotnet\cs\Microsoft.CodeAnalysis.CSharp.CodeStyle.dll
    : Could not load file or assembly 'Microsoft.CodeAnalysis, Version=3.10.0.0, Culture=neutral,
    PublicKeyToken=31bf3856ad364e35'. The system cannot find the file specified..". -->
    <PackageReference Include="Microsoft.CodeAnalysis.Compilers" Version="4.1.0">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers;</IncludeAssets>
    </PackageReference>
  </ItemGroup>

  <ItemGroup>
    <AdditionalFiles Include="$(MSBuildThisFileDirectory)stylecop.json" Link="stylecop.json" />
    <AdditionalFiles Include="$(MSBuildThisFileDirectory)SonarLint.xml" Link="SonarLint.xml" />
  </ItemGroup>

  <Target Name="DisableAnalyzers" BeforeTargets="CoreCompile" Condition="'$(RunCodeAnalysis)' == 'false'">
    <ItemGroup>
      <Analyzer Remove="@(Analyzer)" />
    </ItemGroup>
  </Target>

  <Target Name="Copy editorconfig" AfterTargets="AfterResolveReferences" Condition="'$(SolutionDir)' != '*Undefined*'">
    <Copy SourceFiles="$(MSBuildThisFileDirectory).editorconfig" DestinationFolder="$(SolutionDir)" SkipUnchangedFiles="true" />
  </Target>
</Project>
